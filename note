# app.py
import streamlit as st
import theme
import style

# Set theme and apply global styles
theme.set_theme()
style.apply_global_styles()

# Initialize session state for purchase mode
if "purchase_mode" not in st.session_state:
    st.session_state.purchase_mode = False

# Render pages based on purchase mode
if st.session_state.purchase_mode:
    import purchase
    purchase.purchase_page()
else:
    from sidebar import sidebar_menu
    selected_page = sidebar_menu()

    if selected_page == "Home":
        import search
        search.home_page()

        from search_results import display_all_trees
        st.divider()
        display_all_trees()

    elif selected_page == "Status":
        import status
        status.status_page()
    elif selected_page == "Contact":
        import contact_page
        contact_page.show_contact()
    elif selected_page == "About":
        import about_page
        about_page.show_about()

# Display footer on all pages
style.show_footer()
---------------------------------------
sidebar.py 
import streamlit as st

def sidebar_menu():
    # Apply custom CSS for the sidebar
    st.markdown("""
    <style>
        .sidebar-header {
            color: #2c3e50;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 700;
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 2px solid #f0f2f6;
            text-align: center;
        }
        .sidebar-menu-item {
            background-color: white;
            color: #2c3e50;
            border: 1px solid #e6e9ed;
            border-radius: 8px;
            padding: 12px 15px;
            margin-bottom: 10px;
            text-align: left;
            font-weight: 500;
            transition: all 0.3s ease;
            width: 100%;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .sidebar-menu-item:hover {
            background-color: #f8f9fa;
            border-color: #cbd3da;
            box-shadow: 0 4px 8px rgba(0,0,0,0.08);
            transform: translateY(-2px);
        }
        .sidebar-menu-item-active {
            background-color: #3498db;
            color: white;
            border: 1px solid #2980b9;
        }
        .sidebar-menu-item-active:hover {
            background-color: #2980b9;
            color: white;
        }
        .sidebar-logo {
            text-align: center;
            margin-bottom: 20px;
        }
        .sidebar-divider {
            margin: 20px 0;
            border: none;
            height: 1px;
            background-color: #e6e9ed;
        }
        .sidebar-bottom {
            text-align: center;
            margin-top: 20px;
            font-size: 0.9rem;
            color: #666;
        }
        .sidebar-bottom a {
            color: #3498db;
            text-decoration: none;
            font-weight: 500;
        }
        .sidebar-bottom a:hover {
            text-decoration: underline;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Display the HASAR logo
    st.sidebar.markdown("""
    <div class="sidebar-logo">
    """, unsafe_allow_html=True)
    st.sidebar.image("https://raw.githubusercontent.com/Hakari-Bibani/HASAR1/main/hasar.png", width=230)  # Adjust width as needed
    st.sidebar.markdown("""
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize session state if not exists
    if 'selected_page' not in st.session_state:
        st.session_state.selected_page = "Home"
    
    # Create sidebar menu buttons with active state styling
    def styled_button(label, key, active_page, icon):
        active = st.session_state.selected_page == active_page
        style = "sidebar-menu-item-active" if active else "sidebar-menu-item"
        if st.sidebar.button(f"{icon} {label}", key=key, use_container_width=True, help=f"Go to {label} page"):
            st.session_state.selected_page = active_page
            st.session_state.purchase_mode = False  # Reset purchase mode when changing page
        st.sidebar.markdown(f"<script>document.querySelectorAll('button')[document.querySelectorAll('button').length-1].className = '{style}';</script>", unsafe_allow_html=True)
    
    # Add icons to the buttons
    styled_button("Home", "home_button", "Home", "üè†")
    styled_button("Status", "status_button", "Status", "üìä")
    styled_button("Contact", "contact_button", "Contact", "üìû")
    styled_button("About", "about_button", "About", "‚ÑπÔ∏è")

    # Acknowledgment at bottom with a nicer design
    st.sidebar.markdown("""
    <div class="sidebar-divider"></div>
    <div class="sidebar-bottom">
        Web App developed by <br>
        <a href="https://aiforimpact.streamlit.app/" target="_blank">
            <span style="font-size: 1.1rem; color: #27ae60;">ü§ñ AI for Impact</span>
        </a>
    </div>
    """, unsafe_allow_html=True)
    
    return st.session_state.selected_page
    
if __name__ == "__main__":
    sidebar_menu()


--------------------------------------


status

import streamlit as st
import pandas as pd
from handle import run_query  # Updated import

def status_page():
    st.markdown("""
    <style>
        .status-header {
            color: #2c3e50;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 700;
            margin-bottom: 1.5rem;
            text-align: center;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f0f2f6;
        }
        .search-container {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }
        .order-card {
            border: 1px solid #e6e9ed;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
            background-color: white;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            transition: transform 0.3s ease;
        }
        .order-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.12);
        }
        .order-title {
            color: #2c3e50;
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 10px;
        }
        .order-details {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 10px;
            margin-top: 10px;
        }
        .detail-item {
            margin: 5px 0;
            font-size: 0.9rem;
        }
        .detail-label {
            font-weight: 600;
            color: #2d3436;
        }
        .detail-value {
            color: #576574;
        }
        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        .status-pending {
            background-color: #ffeaa7;
            color: #d35400;
        }
        .status-processing {
            background-color: #81ecec;
            color: #00a8ff;
        }
        .status-shipped {
            background-color: #55efc4;
            color: #00b894;
        }
        .status-delivered {
            background-color: #a3cb38;
            color: #fff;
        }
        .status-cancelled {
            background-color: #ff7675;
            color: #fff;
        }
        .view-button {
            background-color: #3498db;
            color: white;
            font-weight: 600;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.3s ease;
        }
        .view-button:hover {
            background-color: #2980b9;
        }
        .no-results {
            text-align: center;
            padding: 30px;
            background-color: #f8f9fa;
            border-radius: 10px;
            color: #7f8c8d;
        }
    </style>
    """, unsafe_allow_html=True)

    st.markdown("<h1 class='status-header'>Order Status & History</h1>", unsafe_allow_html=True)
    
    with st.container():
        st.markdown("<div class='search-container'>", unsafe_allow_html=True)
        st.subheader("Find Your Orders")
        
        identifier = st.text_input(
            "Email",
            placeholder="Enter your email address",
            help="Enter the email you used when placing your order"
        )
        
        view_clicked = st.button("View Orders", use_container_width=True)
        st.markdown("</div>", unsafe_allow_html=True)
    
    if view_clicked:
        if identifier:
            with st.spinner("Fetching your orders..."):
                query = """
                SELECT tree_name, customer_full_name, quantity, amount, address, status, note
                FROM payments
                WHERE email = %s
                ORDER BY status;
                """
                results = run_query(query, (identifier,))
            
            if results:
                st.success(f"Found {len(results)} orders for {identifier}")
                
                for idx, order in enumerate(results):
                    status_class = "status-pending"  # Default
                    if order['status'].lower() == 'processing':
                        status_class = "status-processing"
                    elif order['status'].lower() == 'shipped':
                        status_class = "status-shipped"
                    elif order['status'].lower() == 'delivered':
                        status_class = "status-delivered"
                    elif order['status'].lower() == 'cancelled':
                        status_class = "status-cancelled"
                    
                    st.markdown(f"""
                    <div class="order-card">
                        <div class="order-title">Order #{idx+1}: {order['tree_name']}</div>
                        <span class="status-badge {status_class}">{order['status']}</span>
                        <div class="order-details">
                            <p class="detail-item">
                                <span class="detail-label">Customer:</span> 
                                <span class="detail-value">{order['customer_full_name']}</span>
                            </p>
                            <p class="detail-item">
                                <span class="detail-label">Quantity:</span> 
                                <span class="detail-value">{order['quantity']}</span>
                            </p>
                            <p class="detail-item">
                                <span class="detail-label">Amount:</span> 
                                <span class="detail-value">{order['amount']} IQD</span>
                            </p>
                            <p class="detail-item">
                                <span class="detail-label">Delivery Address:</span> 
                                <span class="detail-value">{order['address']}</span>
                            </p>
                        </div>
                        <div style="margin-top: 15px;">
                            <p class="detail-item">
                                <span class="detail-label">Note:</span> 
                                <span class="detail-value">{order['note'] if order['note'] else 'No additional notes'}</span>
                            </p>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div class="no-results">
                    <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#7f8c8d" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="8" y1="12" x2="16" y2="12"></line>
                    </svg>
                    <h3>No Orders Found</h3>
                    <p>We couldn't find any orders associated with this email.</p>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("Please enter your email to view your orders.")

if __name__ == "__main__":
    st.set_page_config(
        page_title="Order Status",
        page_icon="üå≥",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    status_page()

------------------------------------------
---------------------------
purchase


import streamlit as st
import datetime
from handle import execute_query  # Updated import

def purchase_page():
    st.set_page_config(
        page_title="Tree Purchase",
        page_icon="üå≥",
        layout="centered"
    )

    st.markdown("""
        <style>
        .main {
            padding: 2rem;
        }
        .stTextInput, .stNumberInput, .stSelectbox {
            margin-bottom: 1rem;
        }
        .order-summary {
            background-color: #f0f2f6;
            padding: 1.5rem;
            border-radius: 10px;
            margin-bottom: 2rem;
        }
        .page-title {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 2rem;
            font-family: 'Helvetica Neue', sans-serif;
        }
        .section-header {
            color: #34495e;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            font-size: 1.2rem;
            font-weight: bold;
        }
        </style>
    """, unsafe_allow_html=True)

    st.markdown("<h1 class='page-title'>üå≥ Tree Purchase Form</h1>", unsafe_allow_html=True)

    if 'purchase_tree' not in st.session_state:
        st.error("‚ö†Ô∏è No tree selected for purchase.")
        return

    tree_name = st.session_state.purchase_tree
    available_quantity = st.session_state.available_quantity
    unit_price = st.session_state.unit_price

    st.markdown("<div class='section-header'>Order Summary</div>", unsafe_allow_html=True)
    with st.container():
        col1, col2 = st.columns(2)
        with col1:
            st.markdown(f"**Selected Tree:** {tree_name}")
            st.markdown(f"**Available Quantity:** {available_quantity}")
        with col2:
            st.markdown(f"**Unit Price:** {unit_price} IQD")
            quantity = st.number_input(
                "Quantity",
                min_value=1,
                max_value=int(available_quantity),
                step=1,
                help="Select the number of trees you wish to purchase"
            )
            total_price = quantity * float(unit_price)
            st.markdown(f"**Total Price:** {total_price:,.2f} IQD")

    st.markdown("<div class='section-header'>Customer Information</div>", unsafe_allow_html=True)
    with st.container():
        col1, col2 = st.columns(2)
        with col1:
            customer_full_name = st.text_input(
                "Full Name",
                placeholder="Enter your full name",
                help="Please enter your complete name as it appears on official documents"
            )
            # Username field removed as per request.
            address = st.text_area(
                "Delivery Address",
                placeholder="Enter your complete delivery address",
                help="Please provide a detailed delivery address"
            )
        with col2:
            whatsapp_number = st.text_input(
                "WhatsApp Number",
                placeholder="+964xxxxxxxxxx",
                help="Include country code"
            )
            email = st.text_input(
                "Email Address",
                placeholder="your.email@example.com",
                help="We'll send order confirmation to this email"
            )
            payment_preference = st.selectbox(
                "Payment Method",
                ["Cash on Arrival"],
                help="Select your preferred payment method"
            )

    payment_date = datetime.date.today().isoformat()

    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        order_button = st.button(
            "Place Order",
            type="primary",
            use_container_width=True,
            help="Click to confirm your order"
        )
        back_button = st.button(
            "Back to Home",
            use_container_width=True
        )

    if order_button:
        if not all([customer_full_name, address, whatsapp_number, email]):
            st.error("‚ö†Ô∏è Please fill in all required fields!")
            return

        query = """
        INSERT INTO payments (
            tree_name, customer_full_name, quantity, amount, address,
            whatsapp_number, email, payment_preference, payment_date, status, note
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
        """
        
        try:
            execute_query(query, (
                tree_name, customer_full_name, str(quantity),
                str(total_price), address, whatsapp_number, email,
                payment_preference, payment_date, "Pending", ""
            ))
            
            st.success("üéâ Order placed successfully!")
            st.balloons()
            
            st.session_state.purchase_mode = False
            if hasattr(st, "experimental_rerun"):
                st.experimental_rerun()
                
        except Exception as e:
            st.error(f"‚ùå Error placing order: {str(e)}")

    if back_button:
        st.session_state.purchase_mode = False
        if hasattr(st, "experimental_rerun"):
            st.experimental_rerun()

if __name__ == "__main__":
    purchase_page()


-------------------------------------------------

